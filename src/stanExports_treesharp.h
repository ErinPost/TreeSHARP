// Generated by rstantools.  Do not edit by hand.

/*
    TreeSHARP is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TreeSHARP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TreeSHARP.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_treesharp_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 97> locations_array__ =
  {" (found before start of program)",
  " (in 'treesharp', line 51, column 2 to column 27)",
  " (in 'treesharp', line 52, column 2 to column 23)",
  " (in 'treesharp', line 53, column 2 to column 50)",
  " (in 'treesharp', line 54, column 2 to column 43)",
  " (in 'treesharp', line 57, column 2 to column 21)",
  " (in 'treesharp', line 58, column 2 to column 23)",
  " (in 'treesharp', line 59, column 2 to column 19)",
  " (in 'treesharp', line 60, column 2 to column 30)",
  " (in 'treesharp', line 61, column 2 to column 27)",
  " (in 'treesharp', line 62, column 2 to column 21)",
  " (in 'treesharp', line 91, column 4 to column 22)",
  " (in 'treesharp', line 63, column 4 to column 24)",
  " (in 'treesharp', line 64, column 4 to column 28)",
  " (in 'treesharp', line 65, column 4 to column 27)",
  " (in 'treesharp', line 67, column 5 to column 24)",
  " (in 'treesharp', line 66, column 16 to line 68, column 4)",
  " (in 'treesharp', line 66, column 3 to line 68, column 4)",
  " (in 'treesharp', line 71, column 7 to column 50)",
  " (in 'treesharp', line 70, column 18 to line 72, column 6)",
  " (in 'treesharp', line 70, column 5 to line 72, column 6)",
  " (in 'treesharp', line 69, column 16 to line 73, column 4)",
  " (in 'treesharp', line 69, column 3 to line 73, column 4)",
  " (in 'treesharp', line 74, column 2 to column 32)",
  " (in 'treesharp', line 93, column 11 to column 12)",
  " (in 'treesharp', line 93, column 4 to column 45)",
  " (in 'treesharp', line 94, column 4 to column 82)",
  " (in 'treesharp', line 92, column 17 to line 95, column 3)",
  " (in 'treesharp', line 92, column 2 to line 95, column 3)",
  " (in 'treesharp', line 79, column 4 to column 33)",
  " (in 'treesharp', line 78, column 15 to line 80, column 3)",
  " (in 'treesharp', line 78, column 2 to line 80, column 3)",
  " (in 'treesharp', line 77, column 13 to line 81, column 1)",
  " (in 'treesharp', line 77, column 0 to line 81, column 1)",
  " (in 'treesharp', line 82, column 0 to column 24)",
  " (in 'treesharp', line 83, column 0 to column 29)",
  " (in 'treesharp', line 84, column 0 to column 31)",
  " (in 'treesharp', line 86, column 9 to column 10)",
  " (in 'treesharp', line 86, column 2 to column 43)",
  " (in 'treesharp', line 87, column 2 to column 77)",
  " (in 'treesharp', line 85, column 13 to line 88, column 1)",
  " (in 'treesharp', line 85, column 0 to line 88, column 1)",
  " (in 'treesharp', line 39, column 2 to column 18)",
  " (in 'treesharp', line 40, column 2 to column 17)",
  " (in 'treesharp', line 41, column 17 to column 18)",
  " (in 'treesharp', line 41, column 19 to column 22)",
  " (in 'treesharp', line 41, column 2 to column 24)",
  " (in 'treesharp', line 42, column 2 to column 18)",
  " (in 'treesharp', line 43, column 9 to column 10)",
  " (in 'treesharp', line 43, column 11 to column 12)",
  " (in 'treesharp', line 43, column 2 to column 16)",
  " (in 'treesharp', line 44, column 2 to column 8)",
  " (in 'treesharp', line 45, column 14 to column 15)",
  " (in 'treesharp', line 45, column 2 to column 17)",
  " (in 'treesharp', line 46, column 15 to column 16)",
  " (in 'treesharp', line 46, column 2 to column 18)",
  " (in 'treesharp', line 47, column 15 to column 16)",
  " (in 'treesharp', line 47, column 2 to column 18)",
  " (in 'treesharp', line 48, column 17 to column 18)",
  " (in 'treesharp', line 48, column 2 to column 20)",
  " (in 'treesharp', line 51, column 13 to column 14)",
  " (in 'treesharp', line 52, column 9 to column 10)",
  " (in 'treesharp', line 52, column 11 to column 12)",
  " (in 'treesharp', line 53, column 35 to column 36)",
  " (in 'treesharp', line 57, column 9 to column 10)",
  " (in 'treesharp', line 57, column 11 to column 12)",
  " (in 'treesharp', line 58, column 13 to column 14)",
  " (in 'treesharp', line 59, column 9 to column 10)",
  " (in 'treesharp', line 59, column 11 to column 12)",
  " (in 'treesharp', line 60, column 18 to column 19)",
  " (in 'treesharp', line 60, column 20 to column 21)",
  " (in 'treesharp', line 61, column 18 to column 19)",
  " (in 'treesharp', line 91, column 11 to column 12)",
  " (in 'treesharp', line 6, column 4 to column 21)",
  " (in 'treesharp', line 7, column 4 to column 26)",
  " (in 'treesharp', line 8, column 4 to line 10, column 35)",
  " (in 'treesharp', line 5, column 43 to line 11, column 3)",
  " (in 'treesharp', line 19, column 4 to column 16)",
  " (in 'treesharp', line 20, column 11 to column 12)",
  " (in 'treesharp', line 20, column 4 to column 21)",
  " (in 'treesharp', line 22, column 6 to column 28)",
  " (in 'treesharp', line 23, column 14 to column 15)",
  " (in 'treesharp', line 23, column 6 to column 45)",
  " (in 'treesharp', line 24, column 14 to column 15)",
  " (in 'treesharp', line 24, column 6 to column 45)",
  " (in 'treesharp', line 25, column 14 to column 15)",
  " (in 'treesharp', line 25, column 6 to column 28)",
  " (in 'treesharp', line 26, column 13 to column 14)",
  " (in 'treesharp', line 26, column 6 to column 39)",
  " (in 'treesharp', line 27, column 6 to column 23)",
  " (in 'treesharp', line 28, column 6 to column 28)",
  " (in 'treesharp', line 29, column 4 to line 31, column 68)",
  " (in 'treesharp', line 32, column 4 to column 18)",
  " (in 'treesharp', line 21, column 17 to line 33, column 5)",
  " (in 'treesharp', line 21, column 4 to line 33, column 5)",
  " (in 'treesharp', line 34, column 4 to column 23)",
  " (in 'treesharp', line 18, column 8 to line 35, column 3)"};
template <bool propto__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T1__>>
DM_lpmf(const std::vector<int>& y_v, const T1__& gamma_v_arg__, std::ostream*
        pstream__);
template <bool propto__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T1__>>
DTM_lpmf(const std::vector<int>& y_i, const T1__& gamma_i_arg__,
         const std::vector<int>& parents, const std::vector<int>& children,
         const std::vector<int>& n_children, const std::vector<int>&
         branches, const int& V, std::ostream* pstream__);
template <bool propto__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T1__>>
DM_lpmf(const std::vector<int>& y_v, const T1__& gamma_v_arg__, std::ostream*
        pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& gamma_v = stan::math::to_ref(gamma_v_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N = std::numeric_limits<int>::min();
    current_statement__ = 73;
    N = stan::math::sum(y_v);
    local_scalar_t__ G = DUMMY_VAR__;
    current_statement__ = 74;
    G = stan::math::sum(gamma_v);
    current_statement__ = 75;
    return (((stan::math::lgamma(G) - stan::math::lgamma((N + G))) +
           stan::math::sum(
             stan::math::lgamma(
               stan::math::add(stan::math::to_vector(y_v), gamma_v))))
           - stan::math::sum(stan::math::lgamma(gamma_v)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
stan::promote_args_t<stan::base_type_t<T1__>>
DTM_lpmf(const std::vector<int>& y_i, const T1__& gamma_i_arg__,
         const std::vector<int>& parents, const std::vector<int>& children,
         const std::vector<int>& n_children, const std::vector<int>&
         branches, const int& V, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& gamma_i = stan::math::to_ref(gamma_i_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int pos = std::numeric_limits<int>::min();
    current_statement__ = 77;
    pos = 1;
    current_statement__ = 78;
    stan::math::validate_non_negative_index("output", "V", V);
    Eigen::Matrix<local_scalar_t__,-1,1> output =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(V, DUMMY_VAR__);
    current_statement__ = 94;
    for (int v = 1; v <= V; ++v) {
      int n = std::numeric_limits<int>::min();
      current_statement__ = 80;
      n = stan::model::rvalue(n_children, "n_children",
            stan::model::index_uni(v));
      current_statement__ = 81;
      stan::math::validate_non_negative_index("C_v", "n", n);
      std::vector<int> C_v =
        std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 82;
      stan::model::assign(C_v, stan::math::segment(children, pos, n),
        "assigning variable C_v");
      current_statement__ = 83;
      stan::math::validate_non_negative_index("B_v", "n", n);
      std::vector<int> B_v =
        std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 84;
      stan::model::assign(B_v, stan::math::segment(branches, pos, n),
        "assigning variable B_v");
      current_statement__ = 85;
      stan::math::validate_non_negative_index("y_v", "n", n);
      std::vector<int> y_v =
        std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 86;
      stan::model::assign(y_v,
        stan::model::rvalue(y_i, "y_i", stan::model::index_multi(C_v)),
        "assigning variable y_v");
      current_statement__ = 87;
      stan::math::validate_non_negative_index("gamma_v", "n", n);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 88;
      stan::model::assign(gamma_v,
        stan::model::rvalue(gamma_i, "gamma_i", stan::model::index_multi(B_v)),
        "assigning variable gamma_v");
      int N = std::numeric_limits<int>::min();
      current_statement__ = 89;
      N = stan::math::sum(y_v);
      local_scalar_t__ G = DUMMY_VAR__;
      current_statement__ = 90;
      G = stan::math::sum(gamma_v);
      current_statement__ = 91;
      stan::model::assign(output, (((((stan::math::lgamma((N + 1)) +
        stan::math::lgamma(G)) - stan::math::lgamma((N + G))) +
        stan::math::sum(
          stan::math::lgamma(
            stan::math::add(stan::math::to_vector(y_v), gamma_v)))) -
        stan::math::sum(stan::math::lgamma(gamma_v))) -
        stan::math::sum(
          stan::math::lgamma(stan::math::add(stan::math::to_vector(y_v), 1)))),
        "assigning variable output", stan::model::index_uni(v));
      current_statement__ = 92;
      pos = (pos + n);
    }
    current_statement__ = 95;
    return stan::math::sum(output);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_treesharp final : public model_base_crtp<model_treesharp> {
private:
  int B;
  int I;
  std::vector<std::vector<int>> Y;
  int P;
  Eigen::Matrix<double,-1,-1> X_data__;
  int V;
  std::vector<int> parents;
  std::vector<int> children;
  std::vector<int> branches;
  std::vector<int> n_children;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
public:
  ~model_treesharp() {}
  model_treesharp(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_treesharp_namespace::model_treesharp";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 42;
      context__.validate_dims("data initialization", "B", "int",
        std::vector<size_t>{});
      B = std::numeric_limits<int>::min();
      current_statement__ = 42;
      B = context__.vals_i("B")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "B", B, 2);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "I", "int",
        std::vector<size_t>{});
      I = std::numeric_limits<int>::min();
      current_statement__ = 43;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "I", I, 0);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("Y", "I", I);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("Y", "B + 1", (B + 1));
      current_statement__ = 46;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(I),
          static_cast<size_t>((B + 1))});
      Y = std::vector<std::vector<int>>(I,
            std::vector<int>((B + 1), std::numeric_limits<int>::min()));
      {
        std::vector<int> Y_flat__;
        current_statement__ = 46;
        Y_flat__ = context__.vals_i("Y");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= (B + 1); ++sym1__) {
          current_statement__ = 46;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 46;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 46;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "Y", Y, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 47;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("X", "I", I);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("X", "P", P);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(P)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(I, P,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), I, P);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 50;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 50;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      context__.validate_dims("data initialization", "V", "int",
        std::vector<size_t>{});
      V = std::numeric_limits<int>::min();
      current_statement__ = 51;
      V = context__.vals_i("V")[(1 - 1)];
      current_statement__ = 52;
      stan::math::validate_non_negative_index("parents", "V", V);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "parents", "int",
        std::vector<size_t>{static_cast<size_t>(V)});
      parents = std::vector<int>(V, std::numeric_limits<int>::min());
      current_statement__ = 53;
      parents = context__.vals_i("parents");
      current_statement__ = 54;
      stan::math::validate_non_negative_index("children", "B", B);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "children", "int",
        std::vector<size_t>{static_cast<size_t>(B)});
      children = std::vector<int>(B, std::numeric_limits<int>::min());
      current_statement__ = 55;
      children = context__.vals_i("children");
      current_statement__ = 56;
      stan::math::validate_non_negative_index("branches", "B", B);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "branches", "int",
        std::vector<size_t>{static_cast<size_t>(B)});
      branches = std::vector<int>(B, std::numeric_limits<int>::min());
      current_statement__ = 57;
      branches = context__.vals_i("branches");
      current_statement__ = 58;
      stan::math::validate_non_negative_index("n_children", "V", V);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "n_children", "int",
        std::vector<size_t>{static_cast<size_t>(V)});
      n_children = std::vector<int>(V, std::numeric_limits<int>::min());
      current_statement__ = 59;
      n_children = context__.vals_i("n_children");
      current_statement__ = 60;
      stan::math::validate_non_negative_index("alpha_raw", "B", B);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("beta_raw", "P", P);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("beta_raw", "B", B);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("delta_unif", "P", P);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("Alpha", "I", I);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("Alpha", "B", B);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("alpha", "B", B);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("beta", "P", P);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("beta", "B", B);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("gamma", "I", I);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("gamma", "B", B);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("delta", "P", P);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("log_lik", "I", I);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = B + (P * B) + P + 1;
  }
  inline std::string model_name() const final {
    return "model_treesharp";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_treesharp_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,1,-1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(B, DUMMY_VAR__);
      current_statement__ = 1;
      alpha_raw = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(B);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P, B, DUMMY_VAR__);
      current_statement__ = 2;
      beta_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(P,
                   B);
      Eigen::Matrix<local_scalar_t__,-1,1> delta_unif =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 3;
      delta_unif = in__.template read_constrain_lub<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     (stan::math::pi() / 2), lp__, P);
      local_scalar_t__ phi_unif = DUMMY_VAR__;
      current_statement__ = 4;
      phi_unif = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, (stan::math::pi() / 2), lp__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Alpha =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(I, B, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,1,-1> alpha =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(B, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P, B, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(I, B, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 12;
      phi = stan::math::tan(phi_unif);
      current_statement__ = 13;
      stan::model::assign(delta, stan::math::tan(delta_unif),
        "assigning variable delta");
      current_statement__ = 14;
      stan::model::assign(alpha, stan::math::multiply(10, alpha_raw),
        "assigning variable alpha");
      current_statement__ = 17;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 15;
        stan::model::assign(Alpha, alpha, "assigning variable Alpha",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      current_statement__ = 22;
      for (int p = 1; p <= P; ++p) {
        current_statement__ = 20;
        for (int b = 1; b <= B; ++b) {
          current_statement__ = 18;
          stan::model::assign(beta, ((phi *
            stan::model::rvalue(delta, "delta", stan::model::index_uni(p))) *
            stan::model::rvalue(beta_raw, "beta_raw",
              stan::model::index_uni(p), stan::model::index_uni(b))),
            "assigning variable beta", stan::model::index_uni(p),
            stan::model::index_uni(b));
        }
      }
      current_statement__ = 23;
      stan::model::assign(gamma,
        stan::math::exp(stan::math::add(Alpha, stan::math::multiply(X, beta))),
        "assigning variable gamma");
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "gamma", gamma, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "delta", delta, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      {
        current_statement__ = 33;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 31;
          for (int b = 1; b <= B; ++b) {
            current_statement__ = 29;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(beta_raw, "beta_raw",
                               stan::model::index_uni(p),
                               stan::model::index_uni(b)), 0, 1));
          }
        }
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_raw, 0, 1));
        current_statement__ = 35;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(phi_unif, 0,
                         (stan::math::pi() / 2)));
        current_statement__ = 36;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(delta_unif, 0,
                         (stan::math::pi() / 2)));
        current_statement__ = 41;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 37;
          stan::math::validate_non_negative_index("gamma_i", "B", B);
          Eigen::Matrix<local_scalar_t__,-1,1> gamma_i =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(B, DUMMY_VAR__);
          current_statement__ = 38;
          stan::model::assign(gamma_i,
            stan::math::to_vector(
              stan::model::rvalue(gamma, "gamma", stan::model::index_uni(i),
                stan::model::index_omni())), "assigning variable gamma_i");
          current_statement__ = 39;
          lp_accum__.add(DTM_lpmf<false>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_uni(i),
                             stan::model::index_omni()), gamma_i, parents,
                           children, n_children, branches, V, pstream__));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_treesharp_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,1,-1> alpha_raw =
        Eigen::Matrix<double,1,-1>::Constant(B,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha_raw = in__.template read<Eigen::Matrix<local_scalar_t__,1,-1>>(B);
      Eigen::Matrix<double,-1,-1> beta_raw =
        Eigen::Matrix<double,-1,-1>::Constant(P, B,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta_raw = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(P,
                   B);
      Eigen::Matrix<double,-1,1> delta_unif =
        Eigen::Matrix<double,-1,1>::Constant(P,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      delta_unif = in__.template read_constrain_lub<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     (stan::math::pi() / 2), lp__, P);
      double phi_unif = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      phi_unif = in__.template read_constrain_lub<local_scalar_t__,
                   jacobian__>(0, (stan::math::pi() / 2), lp__);
      Eigen::Matrix<double,-1,-1> Alpha =
        Eigen::Matrix<double,-1,-1>::Constant(I, B,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,1,-1> alpha =
        Eigen::Matrix<double,1,-1>::Constant(B,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> beta =
        Eigen::Matrix<double,-1,-1>::Constant(P, B,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> gamma =
        Eigen::Matrix<double,-1,-1>::Constant(I, B,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(P,
          std::numeric_limits<double>::quiet_NaN());
      double phi = std::numeric_limits<double>::quiet_NaN();
      out__.write(alpha_raw);
      out__.write(beta_raw);
      out__.write(delta_unif);
      out__.write(phi_unif);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 12;
      phi = stan::math::tan(phi_unif);
      current_statement__ = 13;
      stan::model::assign(delta, stan::math::tan(delta_unif),
        "assigning variable delta");
      current_statement__ = 14;
      stan::model::assign(alpha, stan::math::multiply(10, alpha_raw),
        "assigning variable alpha");
      current_statement__ = 17;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 15;
        stan::model::assign(Alpha, alpha, "assigning variable Alpha",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      current_statement__ = 22;
      for (int p = 1; p <= P; ++p) {
        current_statement__ = 20;
        for (int b = 1; b <= B; ++b) {
          current_statement__ = 18;
          stan::model::assign(beta, ((phi *
            stan::model::rvalue(delta, "delta", stan::model::index_uni(p))) *
            stan::model::rvalue(beta_raw, "beta_raw",
              stan::model::index_uni(p), stan::model::index_uni(b))),
            "assigning variable beta", stan::model::index_uni(p),
            stan::model::index_uni(b));
        }
      }
      current_statement__ = 23;
      stan::model::assign(gamma,
        stan::math::exp(stan::math::add(Alpha, stan::math::multiply(X, beta))),
        "assigning variable gamma");
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "gamma", gamma, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "delta", delta, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      if (emit_transformed_parameters__) {
        out__.write(Alpha);
        out__.write(alpha);
        out__.write(beta);
        out__.write(gamma);
        out__.write(delta);
        out__.write(phi);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(I,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 24;
        stan::math::validate_non_negative_index("gamma_i", "B", B);
        Eigen::Matrix<double,-1,1> gamma_i =
          Eigen::Matrix<double,-1,1>::Constant(B,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 25;
        stan::model::assign(gamma_i,
          stan::math::to_vector(
            stan::model::rvalue(gamma, "gamma", stan::model::index_uni(i),
              stan::model::index_omni())), "assigning variable gamma_i");
        current_statement__ = 26;
        stan::model::assign(log_lik,
          DTM_lpmf<false>(
            stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
              stan::model::index_omni()), gamma_i, parents, children,
            n_children, branches, V, pstream__),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,1,-1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(B, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(B),
        "assigning variable alpha_raw");
      out__.write(alpha_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P, B, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(P, B),
        "assigning variable beta_raw");
      out__.write(beta_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> delta_unif =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(delta_unif,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P),
        "assigning variable delta_unif");
      out__.write_free_lub(0, (stan::math::pi() / 2), delta_unif);
      local_scalar_t__ phi_unif = DUMMY_VAR__;
      current_statement__ = 4;
      phi_unif = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, (stan::math::pi() / 2), phi_unif);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_raw",
        "double", std::vector<size_t>{static_cast<size_t>(B)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(P), static_cast<size_t>(B)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "delta_unif",
        "double", std::vector<size_t>{static_cast<size_t>(P)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "phi_unif",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,1,-1> alpha_raw =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(B, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_raw_flat__;
        current_statement__ = 1;
        alpha_raw_flat__ = context__.vals_r("alpha_raw");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alpha_raw, alpha_raw_flat__[(pos__ - 1)],
            "assigning variable alpha_raw", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha_raw);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(P, B, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_raw_flat__;
        current_statement__ = 2;
        beta_raw_flat__ = context__.vals_r("beta_raw");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(beta_raw, beta_raw_flat__[(pos__ - 1)],
              "assigning variable beta_raw", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> delta_unif =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> delta_unif_flat__;
        current_statement__ = 3;
        delta_unif_flat__ = context__.vals_r("delta_unif");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(delta_unif, delta_unif_flat__[(pos__ - 1)],
            "assigning variable delta_unif", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, (stan::math::pi() / 2), delta_unif);
      local_scalar_t__ phi_unif = DUMMY_VAR__;
      current_statement__ = 4;
      phi_unif = context__.vals_r("phi_unif")[(1 - 1)];
      out__.write_free_lub(0, (stan::math::pi() / 2), phi_unif);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_raw", "beta_raw", "delta_unif",
                "phi_unif"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"Alpha", "alpha", "beta", "gamma", "delta", "phi"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(B)},
                std::vector<size_t>{static_cast<size_t>(P),
                  static_cast<size_t>(B)},
                std::vector<size_t>{static_cast<size_t>(P)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(I),
               static_cast<size_t>(B)},
             std::vector<size_t>{static_cast<size_t>(B)},
             std::vector<size_t>{static_cast<size_t>(P),
               static_cast<size_t>(B)},
             std::vector<size_t>{static_cast<size_t>(I),
               static_cast<size_t>(B)},
             std::vector<size_t>{static_cast<size_t>(P)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(I)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta_unif" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi_unif");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "Alpha" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "gamma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "phi");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta_unif" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "phi_unif");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "Alpha" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          param_names__.emplace_back(std::string() + "gamma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        param_names__.emplace_back(std::string() + "delta" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "phi");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(B) + "},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"parameters\"},{\"name\":\"delta_unif\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"phi_unif\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(B) + "},\"block\":\"parameters\"},{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"parameters\"},{\"name\":\"delta_unif\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"phi_unif\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Alpha\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(P) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(I) + ",\"cols\":" + std::to_string(B) + "},\"block\":\"transformed_parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(I) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((B + (P * B)) + P) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((I *
      B) + B) + (P * B)) + (I * B)) + P) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (I);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((B + (P * B)) + P) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((I *
      B) + B) + (P * B)) + (I * B)) + P) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (I);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_treesharp_namespace::model_treesharp;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_treesharp_namespace::profiles__;
}
#endif
#endif
